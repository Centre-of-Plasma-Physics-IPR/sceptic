Started 6 Mar 

Planning to include the vzsum and its derived momentum contribution
in the outputs. 

added vzsum to all places where there's a corresponding vtp2sum,
including output.

added into the tools. 
However, the problem with that is that the tools are then not going
to work with old outputs that don't have the vrsum. Because there's
the wrong number of variables. So made that read conditional. 

Got Leo's fgen to fgencol and modified that too. 

postproc seems to work still.

10 Mar
Found that there's a problem with mpi on unity. It appears to be able to
run scepticmpi but it does not complete.

Rebooted mpd on all nodes.

Made a trivial mpitest program. Tried to run it. Got

[hutch@unity sceptic]$ mpiexec -n 20 ./mpitest
problem with execution of ./mpitest  on  node30:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node02:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node26:  [Errno 2] No such file or directory 

[hutch@unity sceptic]$ mpiexec -n 36 ./mpitest
problem with execution of ./mpitest  on  node21:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node05:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node06:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node01:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node17:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node30:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node02:  [Errno 2] No such file or directory 
problem with execution of ./mpitest  on  node26:  [Errno 2] No such file or directory 

Obviously what this means is that some of the unity nodes do not have access
to up-to-date versions of /beo_codes/hutch/src/sceptic. They can't find
the program I just created. This probably means that there are incompatible
versions of scepticmpi running on different nodes. NFS problem, I'm sure.


14 Mar 07

Trying to track down the forces associated with collisions and the 
related asymmetries. 

There are inaccuracies associated with exit, reinjection and collisions. 

The test for leaving the domain is done after moving but before colliding.
Colliding addresses possible collisions for the step just taken. However
if a particle has exited the domain, it is then not included for possible
collision in the prior step. A collision, if it had occurred before the
particle exited, might have prevented the exit. Therefore, particles have
a tendency to leave more rapidly than they should. 

Reinjection moves the reinjected particle by an amount that is a
random fraction of the assumed prior step, placing it inside the
domain.  When a collision of this reinjected particle is detected, it
is backtracked then collided. The backtracking might mean that the
particle collided outside the domain. If it does, it may not make it
into the domain on the succeeding fractional step. In that case,
currently, the particle is reinjected at the original end-of-step but
with the collided velocity. This is an approximation that will tend
to place particles inside the domain with on-average lower inward normal
velocity than they should have. It might be better to ignore collisions
that occur outside the domain (when backtracked).

Both of these effects appear to bias the particle injection by causing
particles to leave the domain faster than they should. However, the
effect definitely ought to decrease as timestep is decreased, since it
is proportional to \nu dt.

16 Mar

Established that decreasing dt while s.dt is constant does not substantially
change the error.

Revisiting single processor verifications.  Modified pdiag to document
some upstream versus downstream comparisons, and to limit the r-range.

Found that there appears to be a significant discrepancy at low
collisionality between the observed ion distribution and the analytic,
but not at high collisionality. But doubling dt seems to reduce it and
the distribution is then pretty correct.

Also found there is a density discrepancy in the costheta plus versus
minus regions, which appears systematic. When dealing with x30, we need
an upstream/downstream asymmetry of about 30/ \pi rmax^2 to give a force
of 30 units (nT r_p^2). This requires about 1% asymmetry. This much is
present in the sums I get, although the potential asymmetry is somewhat
below this = few x 10^-3 

23 Mar

Implemented angle distribution testing in fvinjecttest. We get the 
mean and 1st moment correct to better than 1 part in 1000 for 1M 
injections. Thus the reinjection is correct, as far as one can tell. 
This can't give anything like the 1% asymmetry.

28 Mar 
Implemented kt5 kt6 which do no backtracking. They now seem to work
and kt5 gives good particle distributions, but there are still force
errors and density drop. Therefore it does not seem that I have 
succeeded in fixing the problems with reinjection.

29 Mar
Showed that v1 kt5 k.1 gives comparable density drop (.97) for s1000 d.1 and 
s5000 d.02, showing that the density drop is not a function of timestep.
With k.001 the density drop is reduced (~.99), so it seems that collision
frequency is important. Similarly, k.01 is ~99.

k1 starts with a big density drop ~0.8 and then drifts up slowly through
the run, ending with about 0.94. 
There's a slight error on the downstream side of the distribution function.
The observed distribution there, rises above the analytic, so the
distribution is a little less shifted overall than analytic. I wonder if
this error is enough to be significant.
The initial error is substantially lower (~.93) when run with .d02, which shows
perhaps that there is a timestep issue at these high collisionalities.
This might be a multiple-collision issue, I suppose. The pdiag error is
much reduced by the smaller timestep. But the density drop error, while
not quite as large, is still substantial: 0.96.

Therefore there is an error that is d-dependent but there's also one that
is not. The one that is not is rather weakly dependent on the actual
collisionality. 

Try artificially multiplying riest by .95. Got density ~1.03 as expected.
That hack gives the response expected.

Try increasing nthfvsize to 150. Get about .99 this seems better than the
previous kt5, k.1, d.1, s1000 (.97). Yes it definitely is.
Try nthfvsize 300. Does not run correctly for some reason. 
It's a dependency problem touching makefile makes it work.
There might have been a problem with my prior change. This one seems
to have about .975. So we don't have clear convergence. nthfvsize=100
seems to have about .98. Not clear that we are chasing a real effect.
